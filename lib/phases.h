#include <ncurses.h>
#include <unistd.h>
#include "tools_ncurses.h"

int phase_1()
{
     WINDOW *code_win;

     clear();
     box(stdscr, 0, 0);

     attron(A_REVERSE);     
     mvprintw(LINES-1, 0, " Press ENTER to continue ");
     attroff(A_REVERSE);

     attron(A_BOLD);
     mvprintw(2, 4, "To get started let's talk about the stack.");
     mvprintw(3, 4, "The stack is a form of memory which is, as the name suggests, a stack.");
     mvprintw(4, 4, "It is created when creating arrays for example.");
     mvprintw(5, 4, "Arrays are a way of storing multiple items.");
     mvprintw(6, 4, "Below you can see how an array works in C.");
     attroff(A_BOLD);

     mvprintw(10, 8, "char *array[32] = {Item0, Item1, ... , Item31};");

     attron(A_BOLD);
     mvprintw(14, 4, "2 things are important here:");
     mvprintw(15, 4, " - The array is called with '[32]'");
     mvprintw(16, 4, "   this reserves 32 bytes of memory for the array.");
     mvprintw(17, 4, " - The array contains 32 items, starting at 0 up to 31.");
     mvprintw(19, 4, "The next page will show you how a stack is laid out in memory.");
     attroff(A_BOLD);

     refresh();

     code_win = create_newwin(3, 51, 9, 6);
     mvwprintw(code_win, 1, 2, "char *array[32] = {Item0, Item1, ... , Item31};");
     wrefresh(code_win);

     return 0;
}

int phase_2()
{
     WINDOW *stack1, *stack2, *stack3, *stack4, *stack5, *stack6;
     WINDOW *enum1, *enum2, *enum3, *enum4, *enum5, *enum6;
 
     int height, width, starty, startx;

     height = 3;
     width = 12; // size of a 8 Byte memory address plus padding (8 Bytes + 2 '0x' + 2 padding)
     starty = LINES/2-9;
     startx = COLS-15;

     clear();
     box(stdscr, 0, 0);

     attron(A_REVERSE);     
     mvprintw(LINES-1, 0, " Press ENTER to continue ");
     attroff(A_REVERSE);

     attron(A_BOLD);
     mvprintw(2, 4, "The hexadecimal numbers are memory addresses.");
     mvprintw(3, 4, "In this example the stack is highlighted.");
     mvprintw(4, 4, "An important fact is that the stack grows downwards.");
     mvprintw(5, 4, "So in our example it would grow towards address 1.");
     mvprintw(7, 4, "But let's go through the addresses:");
     mvprintw(8, 4, "- 6 is the return address. This is important later.");
     mvprintw(9, 4, "- 5 is the base pointer. It marks the base of the stack.");
     mvprintw(10, 4, "- 4 to 2 is reserved for the stack.");
     mvprintw(11, 4, "- 1 would be the heap or some other data.");
     mvprintw(12, 4, "  It can also be empty memory for the stack to grow.");
     mvprintw(15, 4, "So if we gave our buffer 32 Bytes");
     mvprintw(16, 4, "then it will only hold something that is 32 Bytes long.");
     mvprintw(18, 4, "What if give it something that's bigger than 32 Bytes?");
     attroff(A_BOLD);

     refresh();

     // create the stack windows and the numbers + windows next to them.
     stack1 = create_newwin(height, width, starty, startx);
     stack2 = create_newwin(height, width, starty+3, startx);
     stack3 = create_newwin(height, width, starty+6, startx);
     stack4 = create_newwin(height, width, starty+9, startx);
     stack5 = create_newwin(height, width, starty+12, startx);
     stack6 = create_newwin(height, width, starty+15, startx);

     startx = COLS-(width+6);
     width -= 9;

     enum1 = create_newwin(height, width, starty, startx);
     enum2 = create_newwin(height, width, starty+3, startx);
     enum3 = create_newwin(height, width, starty+6, startx);
     enum4 = create_newwin(height, width, starty+9, startx);
     enum5 = create_newwin(height, width, starty+12, startx);
     enum6 = create_newwin(height, width, starty+15, startx);

     mvwprintw(stack1, 1, 1, "0x00400697");
     mvwprintw(stack2, 1, 1, "0x00400696");
     wattron(stack3, A_STANDOUT);
     mvwprintw(stack3, 1, 1, "0x00400695");
     wattroff(stack3, A_STANDOUT);
     wattron(stack4, A_STANDOUT);
     mvwprintw(stack4, 1, 1, "0x00400694");
     wattroff(stack4, A_STANDOUT);
     wattron(stack5, A_STANDOUT);
     mvwprintw(stack5, 1, 1, "0x00400693");
     wattroff(stack5, A_STANDOUT);
     mvwprintw(stack6, 1, 1, "0x00400692");

     mvwprintw(enum1, 1, 1, "6");
     mvwprintw(enum2, 1, 1, "5");
     mvwprintw(enum3, 1, 1, "4");
     mvwprintw(enum4, 1, 1, "3");
     mvwprintw(enum5, 1, 1, "2");
     mvwprintw(enum6, 1, 1, "1");
     
     wrefresh(stack1);
     wrefresh(stack2);
     wrefresh(stack3);
     wrefresh(stack4);
     wrefresh(stack5);
     wrefresh(stack6);

     wrefresh(enum1);
     wrefresh(enum2);
     wrefresh(enum3);
     wrefresh(enum4);
     wrefresh(enum5);
     wrefresh(enum6);

     return 0;
}
